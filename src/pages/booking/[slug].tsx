import { NextPage } from 'next';
import Head from 'next/head';
import { Footer, Header, Text, Input, Button, Spacer } from '@atomic';
import { navItems, footerData } from '../../utils/data';
import { Formik } from 'formik';
import { authApiRequest } from 'utils/authApiRequest';
import { IBooking, IEvent, IUser } from 'types';
import cookies from 'js-cookie';

import styles from './booking.module.scss';
import { useRouter } from 'next/router';

interface IAdminPageProps {
  event: IEvent;
}

const AdminPage: NextPage<IAdminPageProps> = ({ event }) => {
  const initialValues = {
    event: event._id,
    numPremiumAdultTickets: '0',
    numPremiumChildTickets: '0',
    numStandardAdultTickets: '0',
    numStandardChildTickets: '0',
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>National Museums Scotland - Book an event</title>
        <meta
          name='description'
          content='Generated by create next app'
        />
        <link
          rel='icon'
          href='/favicon.ico'
        />
      </Head>
      <Header navItems={navItems} />

      <Formik
        initialValues={initialValues}
        onSubmit={values => {
          setTimeout(async () => {
            authApiRequest({
              resource: 'booking',
              method: 'POST',
              body: JSON.stringify(values),
            });
          }, 400);
        }}
      >
        {({ values, handleChange, handleBlur, isSubmitting, handleSubmit }) => (
          <form
            className='form'
            onSubmit={handleSubmit}
          >
            <Spacer top='2xl' />
            <Text varient='h3'>Booking: {event.name}</Text>
            <Spacer bottom='xl' />
            <div className={styles.inputContainer}>
              <Input
                name='numPremiumAdultTickets'
                type='number'
                placeholder='Number of Premium Adult Tickets'
                value={values.numPremiumAdultTickets}
                onBlur={handleBlur as any}
                onChange={handleChange as any}
              />
              <Text varient='footer'>(£{event.premiumAdultPrice} each)</Text>
            </div>
            <div className={styles.inputContainer}>
              <Input
                name='numPremiumChildTickets'
                type='number'
                placeholder='Number of Premium Child Tickets'
                value={values.numPremiumChildTickets}
                onBlur={handleBlur as any}
                onChange={handleChange as any}
              />
              <Text varient='footer'>(£{event.premiumChildPrice} each)</Text>
            </div>
            <div className={styles.inputContainer}>
              <Input
                name='numStandardAdultTickets'
                type='number'
                placeholder='Number of Standard Adult Adult Tickets'
                value={values.numStandardAdultTickets}
                onBlur={handleBlur as any}
                onChange={handleChange as any}
              />
              <Text varient='footer'>(£{event.standardAdultPrice} each)</Text>
            </div>

            <div className={styles.inputContainer}>
              <Input
                name='numStandardChildTickets'
                type='number'
                placeholder='Number of Standard Child Tickets'
                value={values.numStandardChildTickets}
                onBlur={handleBlur as any}
                onChange={handleChange as any}
              />
              <Text varient='footer'>(£{event.standardChildPrice} each)</Text>
            </div>

            <div className={styles.btnContainer}>
              <Button
                varient='form'
                isSubmitting={isSubmitting}
                fullWidth
              >
                Book Now
              </Button>
            </div>
          </form>
        )}
      </Formik>

      <Footer {...footerData} />
    </div>
  );
};

export const getServerSideProps = async (context: any) => {
  const token = context.req.cookies.token;
  // redirect if not logged in
  if (!token) {
    return {
      redirect: {
        permanent: false,
        destination: '/login',
      },
    };
  }

  const slug = context.params.slug;
  const fetchEvent = await fetch(
    `https://nms-backend.herokuapp.com/api/v1/events/${slug}`,
  );
  const event = await fetchEvent.json();

  // return 404 if no data
  if (!event.data) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      event: event.data.event,
    },
  };
};
export default AdminPage;
